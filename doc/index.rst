.. Copyright (c) 2009 Ars Aperta, Itaapy, Pierlis, Talend.

   Authors: David Versmisse <david.versmisse@itaapy.com>
            Hervé Cauwelier <herve@itaapy.com>
            Jean-Marie Gouarné <jean-marie.gouarne@arsaperta.com>
            Luis Belmar-Letelier <luis@itaapy.com>

   This file is part of Lpod (see: http://lpod-project.org).
   Lpod is free software; you can redistribute it and/or modify it under
   the terms of either:

   a) the GNU General Public License as published by the Free Software
      Foundation, either version 3 of the License, or (at your option)
      any later version.
      Lpod is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      You should have received a copy of the GNU General Public License
      along with Lpod.  If not, see <http://www.gnu.org/licenses/>.

   b) the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0

Introduction
==============

lpOD is primarily designed as an intermediate, document-oriented API. It's a set of access methods that allows the programmer to create, retrieve, update or delete document components selected according to their logical identifiers and/or their structural and semantic role in the document.

While the lpOD API is XPath-based, it brings a large set of predefined objects with programmer-friendly, mnemonic names, available without technical coding (such as XPath), and associated accessors. The access syntax for these objects  hides the physical data model and reflects a typical user's view on the document. It's designed according to a top-down approach: while the implementation is fully ODF-compliant, the interface maps the conceptual data model of an ODF document more than the ODF XML schema.

The present level1 lpOD API will include and extend the same functional scope as the existing CPAN Perl OpenDocument Connector (http://search.cpan.org/OpenOffice-OODoc), and will cover the three target languages on the basis of a common specification.

The full set of predefined document objects is not frozen, but it presently includes the following ones:

- sections;

- paragraphs and headings;

- item lists and list items;

- links to internal and external resources;

- bookmarks;

- notes and annotations;

- bibliography entries;

- various frames (including text boxes, presentation pages, image containers and so on);

- infra-paragraph text spans;

- variable fields and text fields;

- styles (including master pages and page layouts).

Any object corresponding to a predefined accessor is retrieved (and possibly removed or updated) through a single instruction regardless of its context. In addition, a single instruction is needed to create this kind of object. One of the main design guidelines is to provide the largest possible set of predefined objects according to the real or probable needs of the users' community.

In addition, the present API will be the foundation for ``lpOD level 2`` (coming soon), i.e. the high level library that will bring a set of business-oriented components, dedicated to business intelligence reporting, content management, form processing, and accessibility.

lpOD Cookbook
=============

.. toctree::
   :maxdepth: 3

   cookbook.rst


lpod-cmd-line usefull tools
==============================

.. toctree::
   :maxdepth: 2

   cmd-line-tools.rst


lpOD Architecture level 0
===========================

.. toctree::
   :maxdepth: 3

   level0.rst


lpOD Architecture level 1
===========================

.. toctree::
   :maxdepth: 2

   level1-introduction.rst

.. toctree::
   :maxdepth: 2

   level1-basic-text-containers.rst

.. toctree::
   :maxdepth: 2

   level1-text-marks-and-indices.rst
   level1-tables-of-content.rst
   level1-indices.rst
   level1-notes.rst

.. toctree::
   :maxdepth: 2

   level1-table.rst
   level1-structured-containers.rst

.. toctree::
   :maxdepth: 2


   level1-fields-and-forms.rst
   level1-graphic-content.rst
   level1-metadata.rst

.. toctree::
   :maxdepth: 2

   level1-styles.rst

.. toctree::
   :maxdepth: 2

   level1-application-settings.rst

Autogenerated code documentation
==================================

.. toctree::
   :maxdepth: 2

   autodocs.rst
